passwd:
  users:
    - name: "core"
      ssh_authorized_keys:     
        {% for ssh_host in INSTALL_KEYS %}
        - "{{ SSH_KEYS[ssh_host] }}"
        {% endfor %}        
    - name: "root"
      ssh_authorized_keys:     
        {% for ssh_host in INSTALL_KEYS %}
        - "{{ SSH_KEYS[ssh_host] }}"
        {% endfor %}          
update:
  group:  "stable"
  server: "https://public.update.core-os.net/v1/update/"
locksmith:
  reboot_strategy: "off"     
storage:
  files:
  - filesystem: "root"
    path:       "/etc/hostname"
    mode:       0644
    contents:
      inline: {{ inventory_hostname }}
  - filesystem: "root"
    path:       "/etc/hosts"
    mode:       0644
    contents:
      inline: |
        127.0.0.1 localhost
        127.0.0.1 {{ inventory_hostname }}
        {{ MASTER_HOST }} reg.local    
  - filesystem: "root"
    path:       "/etc/kubernetes/scripts/rkt-prepare.sh"
    mode:       0755
    contents:
      inline: |   
        #!/bin/bash 

        set -e  

        HTTP_SERVER="${HTTP_SERVER:-https://gitlab.ispacesys.cn/source/cig/tree/master/k8s}"       

        mkdir -p /etc/kubernetes/downloads

        ACI_REGISTRY="${ACI_REGISTRY:-registry-2.6.1}" 

        if [[ -e /etc/kubernetes/downloads/$ACI_REGISTRY.aci ]]; then
          echo 'registry aci ready!'
        else
          curl $HTTP_SERVER/$ACI_REGISTRY.tgz > /etc/kubernetes/downloads/$ACI_REGISTRY.tgz
          cd /etc/kubernetes/downloads && tar -xzf /etc/kubernetes/downloads/$ACI_REGISTRY.tgz
          rm -rf /etc/kubernetes/downloads/$ACI_REGISTRY.tgz
        fi

        REGISTRY_DATA="${REGISTRY_DATA:-registry-data-v1.7.3}"
        if [[ -e /data/registry/docker ]]; then
          echo 'registry data ready!'
        else
          curl $HTTP_SERVER/$REGISTRY_DATA.tgz > /etc/kubernetes/downloads/$REGISTRY_DATA.tgz
          cd /etc/kubernetes/downloads && tar -xzf /etc/kubernetes/downloads/$REGISTRY_DATA.tgz
          rm -rf /etc/kubernetes/downloads/$REGISTRY_DATA.tgz
          mkdir -p /data/registry
          mv -n /etc/kubernetes/downloads/data/docker /data/registry/docker
          rm -rf /etc/kubernetes/downloads/data
        fi

        ACI_ETCD="${ACI_ETCD:-etcd-v3.2.0}" 

        if [[ -e /etc/kubernetes/downloads/$ACI_ETCD.aci ]]; then
          echo 'etcd aci is already exist!'
        else
          curl $HTTP_SERVER/$ACI_ETCD.tgz > /etc/kubernetes/downloads/$ACI_ETCD.tgz
          cd /etc/kubernetes/downloads && tar -xzf /etc/kubernetes/downloads/$ACI_ETCD.tgz
          rm -rf /etc/kubernetes/downloads/$ACI_ETCD.tgz
          echo 'etcd aci download completed!'
        fi

        ACI_FLANNEL="${ACI_FLANNEL:-flannel-v0.7.1}"

        if [[ -e /etc/kubernetes/downloads/$ACI_FLANNEL.aci ]]; then
          echo 'flannel aci is already exist!'
        else
          curl $HTTP_SERVER/$ACI_FLANNEL.tgz > /etc/kubernetes/downloads/$ACI_FLANNEL.tgz
          cd /etc/kubernetes/downloads && tar -xzf /etc/kubernetes/downloads/$ACI_FLANNEL.tgz
          rm -rf /etc/kubernetes/downloads/$ACI_FLANNEL.tgz
          echo 'flannel aci download completed!'
        fi

        DEP_KUBECTL="${DEP_KUBECTL:-kubectl-v1.7.0}" 
        if ! [ -x "$(command -v kubectl)" ]; then
          if ! [[ -e /etc/kubernetes/downloads/$DEP_KUBECTL ]]; then
            curl $HTTP_SERVER/$DEP_KUBECTL.tgz > /etc/kubernetes/downloads/$DEP_KUBECTL.tgz
            cd /etc/kubernetes/downloads && tar -xzf /etc/kubernetes/downloads/$DEP_KUBECTL.tgz
            rm -rf /etc/kubernetes/downloads/$DEP_KUBECTL.tgz    
          fi
          chmod 0744 /etc/kubernetes/downloads/$DEP_KUBECTL
          ln -s /etc/kubernetes/downloads/$DEP_KUBECTL /opt/bin/kubectl
        fi

        ACI_KUBELET="${ACI_KUBELET:-hyperkube-v1.7.3}"

        if [[ -e /etc/kubernetes/downloads/$ACI_KUBELET.aci ]]; then
          echo 'kubelet aci is already exist!'
        else
          curl $HTTP_SERVER/$ACI_KUBELET.tgz > /etc/kubernetes/downloads/$ACI_KUBELET.tgz
          cd /etc/kubernetes/downloads && tar -xzf /etc/kubernetes/downloads/$ACI_KUBELET.tgz
          rm -rf /etc/kubernetes/downloads/$ACI_KUBELET.tgz
          echo 'kubelet aci download completed!'
        fi                     
  - filesystem: "root"
    path:       "/etc/kubernetes/cni/net.d/10-flannel.conf"
    mode:       0755
    contents:
      inline: |
        {
          "name": "podnet",
          "type": "flannel",
          "delegate": {
              "isDefaultGateway": true
          }
        }           
  - filesystem: "root"
    path:       "/etc/kubernetes/config/kubelet.yaml"
    mode:       0644
    contents:
      inline: |
        apiVersion: v1
        clusters:
        - cluster:
            server: http://127.0.0.1:8080
          name: local
        contexts:
        - context:
            cluster: local
            user: ""
          name: local
        current-context: local
        kind: Config
        preferences: {}
        users: []      
  - filesystem: "root"
    path:       "/etc/kubernetes/manifests/kube-apiserver.yaml"
    mode:       0644
    contents:
      inline: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-apiserver
          namespace: kube-system
        spec:
          hostNetwork: true
          containers:
          - name: kube-apiserver
            image: {{ REGISTRY_SOURCE_LOCAL }}{{ K8S_IMAGES['KUBELET']['NAME'] }}:{{ K8S_IMAGES['KUBELET']['VERSION'] }}
            command:
            - /hyperkube
            - apiserver
            - --bind-address=0.0.0.0
            - --etcd-servers={{ ETCD_ENDPOINTS }}
            - --allow-privileged=true
            - --service-cluster-ip-range={{ SERVICE_IP_RANGE }}
            - --service-node-port-range={{ SERVICE_PORT_RANGE }}
            - --secure-port={{ K8S_PORT }}
            - --advertise-address={{ ADVERTISE_IP }}
            - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
            - --authorization-mode=RBAC
            - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
            - --tls-private-key-file=/etc/kubernetes/ssl/apiserver.key
            - --client-ca-file=/etc/kubernetes/ssl/ca.pem
            - --service-account-key-file=/etc/kubernetes/ssl/apiserver.key
            - --basic-auth-file=/etc/kubernetes/ssl/admin.csv
            - --anonymous-auth=false
            - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true,rbac.authorization.k8s.io/v1beta1=true
            ports:
            - containerPort: {{ K8S_PORT }}
              hostPort: {{ K8S_PORT }}
              name: https
            - containerPort: 8080
              hostPort: 8080
              name: local
            volumeMounts:
            - mountPath: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
              readOnly: true
            - mountPath: /etc/ssl/certs
              name: ssl-certs-host
              readOnly: true
          volumes:
          - hostPath:
              path: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host    
  - filesystem: "root"
    path:       "/etc/kubernetes/manifests/kube-proxy.yaml"
    mode:       0644
    contents:
      inline: |
        ---
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: {{ REGISTRY_SOURCE_LOCAL }}{{ K8S_IMAGES['KUBELET']['NAME'] }}:{{ K8S_IMAGES['KUBELET']['VERSION'] }}
            command:
            - /hyperkube
            - proxy
            - --master=http://127.0.0.1:8080
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /etc/ssl/certs
              name: ssl-certs-host
              readOnly: true
          volumes:
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host       
  - filesystem: "root"
    path:       "/etc/kubernetes/manifests/kube-controller-manager.yaml"
    mode:       0644
    contents:
      inline: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-controller-manager
          namespace: kube-system
        spec:
          hostNetwork: true
          containers:
          - name: kube-controller-manager
            image: {{ REGISTRY_SOURCE_LOCAL }}{{ K8S_IMAGES['KUBELET']['NAME'] }}:{{ K8S_IMAGES['KUBELET']['VERSION'] }}
            command:
            - /hyperkube
            - controller-manager
            - --master=http://127.0.0.1:8080
            - --leader-elect=true
            - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver.key
            - --root-ca-file=/etc/kubernetes/ssl/ca.pem
            resources:
              requests:
                cpu: 200m
            livenessProbe:
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: 10252
              initialDelaySeconds: 15
              timeoutSeconds: 15
            volumeMounts:
            - mountPath: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
              readOnly: true
            - mountPath: /etc/ssl/certs
              name: ssl-certs-host
              readOnly: true
          volumes:
          - hostPath:
              path: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host
  - filesystem: "root"
    path:       "/etc/kubernetes/manifests/kube-scheduler.yaml"
    mode:       0644
    contents:
      inline: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-scheduler
          namespace: kube-system
        spec:
          hostNetwork: true
          containers:
          - name: kube-scheduler
            image: {{ REGISTRY_SOURCE_LOCAL }}{{ K8S_IMAGES['KUBELET']['NAME'] }}:{{ K8S_IMAGES['KUBELET']['VERSION'] }}
            command:
            - /hyperkube
            - scheduler
            - --master=http://127.0.0.1:8080
            - --leader-elect=true
            resources:
              requests:
                cpu: 100m
            livenessProbe:
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: 10251
              initialDelaySeconds: 15
              timeoutSeconds: 15
  - filesystem: "root"
    path:       "/etc/kubernetes/ssl/admin.csv"
    mode:       0644
    contents:
      inline: |
        abc2018,admin,admin
  - filesystem: "root"
    path:       "/etc/kubernetes/ssl/ca.key"
    mode:       0644
    contents:
      inline: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpAIBAAKCAQEA2Cm/1l6YptVWQrH8HEfYeLEwRN3PCJTRJIOF6zyB90wyhJV+
        2xj7UTdlVi+vUSAdnnkDE6jYMumJ2RkYydFKEwI89mBP0LfDXZa9iA06QcHsWuTT
        ec84F+OEXcGExe6iPeJ5FzWD12gR+WZ6xM0H577azAMesaM/yLBXi7Lt5HPCZjMe
        rMVCXxil/oelVJY9xMRPyThzPYv9tn7V7q38ldJ+byhbUVksgJ1Z8GkB8vBKptLa
        Q4oh3nZkG+9ZbxvSvA6KwG+7niH9VmBFzQxArwY93JBFTREEqwa3y3GT/3aCfop1
        v/wFvFHm+I6kgulFFY1KTBjQzXfMuG1V4bsykwIDAQABAoIBAFnfgdMvIWi76lFw
        jtFzTZ1gjiET17BJr2rvBA756U9YbuiQ/1041cS+s3NSACJKqAXrakwSN1Fzp8yL
        krLWQWYF2DLXeFffD2sp8UNPvJj6d7qSyRor/bZw8efJPdrNjMcOEiqEJXy52D9J
        TGHmnRLNV0rbQTe6GBrotn1ut1nzw4+FZUI8DbsOTqgjoQSsf+ORZcqFAYyXGZ3j
        BQyWHUOALlWAbSshEW9T+5Vv+jmY4VhmA/wCMp5NzDuFF80Mn0gs/i8J8YYzkXW6
        ex6uCCTl5WKITONfoX3ky1+k0Yj6qqMY8bK46RYAr2dTmYTHJEIKoOCtvl8NWa1v
        6mEfuwECgYEA7gDgqdX4x79s8zWws94Fc225RDwy9taEFBY5u5L/TrxAGSf9Y089
        jMHFrqxEWGYx3RJfCtsZNr/QPjYJRYRSkDJmcASOHLhfWHsVA6SJ4PhmeeEhcsrM
        3FYFOJbpQEyq62QYhvPww5sOynFK8oMs/2cjygs80WZF2qAi0HX5M4kCgYEA6IIZ
        luQDzFUl0dc/yFjTMLWVjhHONDuBnaqGA9A6YwyOK1mrUcr0uP76vffSI18qtUWd
        LtgSrciCkqTyX4JrpKdOJswKM92+0FzpFu3ymdxfoaEcTOmSISPKir0GIt0410/t
        Jw79BFt+46GK8MFYX3NYfLCP8XQDQ3f06forQjsCgYEAlaDznZKqL1pHsrfEebBR
        mPoYia+XEtxWeRJoBWcrH2L2oVok0XSV65I/J8uhxDmri6LrIbYRKfx5fUMXnR7N
        kV4+TJpwhdncB5KJ6ZpeHJPOST2ie7rIBJYH/kXSKtyIcCijyuQ+L5uiNt/3EHQr
        q/453+IkwDkeHY6jlI82tpECgYA7cT9/jy3VaJNxsXkyDFt54YKpvq2cNvZtS7JV
        eT/kIMqcFKGzGJM2VKHgPWJw/pyZmYGU/1LPMSsIuLjqaBqDDu7xBks5dWCaPpas
        8QqMAYZFeT4V/8UHSfI3RBo0gaBNk7aKvM889PNc2Oj/oj6osIGX5z/1t/Y5oopv
        4zB6DwKBgQDbz97Rxd6eVKaU03OpPbiAQe84ewwwcJf2a7PII1319aqYCxX6Eqc4
        rs8oKVT9ZqvtfDq3HW0ETRHf/u83yi4BdBmBglBjnfYqJh9ywFxW3UJUBMkI6+Ud
        sd9x97+8/Qk/J7UZObdTkeI62HQxJmN7IROW9t7gHXyo4/r7zcSX7A==
        -----END RSA PRIVATE KEY-----
  - filesystem: "root"
    path:       "/etc/kubernetes/ssl/ca.pem"
    mode:       0644
    contents:
      inline: |
        -----BEGIN CERTIFICATE-----
        MIIC+TCCAeGgAwIBAgIJAIAeCX6GvtTKMA0GCSqGSIb3DQEBCwUAMBIxEDAOBgNV
        BAMMB2t1YmUtY2EwIBcNMTYxMTIxMDY0NTE2WhgPMjExNjEwMjgwNjQ1MTZaMBIx
        EDAOBgNVBAMMB2t1YmUtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
        AQDYKb/WXpim1VZCsfwcR9h4sTBE3c8IlNEkg4XrPIH3TDKElX7bGPtRN2VWL69R
        IB2eeQMTqNgy6YnZGRjJ0UoTAjz2YE/Qt8Ndlr2IDTpBwexa5NN5zzgX44RdwYTF
        7qI94nkXNYPXaBH5ZnrEzQfnvtrMAx6xoz/IsFeLsu3kc8JmMx6sxUJfGKX+h6VU
        lj3ExE/JOHM9i/22ftXurfyV0n5vKFtRWSyAnVnwaQHy8Eqm0tpDiiHedmQb71lv
        G9K8DorAb7ueIf1WYEXNDECvBj3ckEVNEQSrBrfLcZP/doJ+inW//AW8Ueb4jqSC
        6UUVjUpMGNDNd8y4bVXhuzKTAgMBAAGjUDBOMB0GA1UdDgQWBBT6oNiPcmCWpnLA
        IaBtGlDA1Frs8DAfBgNVHSMEGDAWgBT6oNiPcmCWpnLAIaBtGlDA1Frs8DAMBgNV
        HRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQB06mKad4WEa95nFjTJ1WGyyZxz
        Wp/5mI/EtdFClm1nvxSARVprp1j2Tu6gQT2q4RRVue9DyAjZNfN9NwjNErb7hzpt
        eyENMJBL1e92/H90AWq4jBExCXQ62EwAGyxnFftdA50X3k7oyqnUt1atNi5ab98E
        cjc104gntHsPr1MoEoaRorF/wtgpHejyn9qVIqf6rLAo/kCDOTbLpIfxphJAAXob
        wJlcJCHcOfO8WE8EwspQMVul5lQXmAfu8zSQKWrtV4ar2CHCw8FEd2a6CBdzyPgC
        W/FCf/V3Mv0OJTZ+M/Sdw/YFfuzJS/S03dctYt+Pz1T9bo2J0dzmy0fd0Hn0
        -----END CERTIFICATE-----
  - filesystem: "root"
    path:       "/etc/kubernetes/ssl/openssl-admin.cnf"
    mode:       0644
    contents:
      inline: |
        [req]
        req_extensions = v3_req
        distinguished_name = req_distinguished_name
        [req_distinguished_name]
        [ v3_req ]
        basicConstraints = CA:FALSE
        keyUsage = nonRepudiation, digitalSignature, keyEncipherment
        subjectAltName = @alt_names
        [alt_names]
        IP.1 = {{ HOST_IP }}
  - filesystem: "root"
    path:       "/etc/kubernetes/ssl/openssl-apiserver.cnf"
    mode:       0644
    contents:
      inline: |
        [req]
        req_extensions = v3_req
        distinguished_name = req_distinguished_name
        [req_distinguished_name]
        [ v3_req ]
        basicConstraints = CA:FALSE
        keyUsage = nonRepudiation, digitalSignature, keyEncipherment
        subjectAltName = @alt_names
        [alt_names]
        DNS.1 = kubernetes
        DNS.2 = kubernetes.default
        DNS.3 = kubernetes.default.svc
        DNS.4 = kubernetes.default.svc.cluster.local
        DNS.5 = {{ MASTER_DOMAIN }}
        IP.1 = {{ K8S_SERVICE_IP }}
        IP.2 = {{ MASTER_HOST }}
  - filesystem: "root"
    path:       "/etc/kubernetes/scripts/kubelet-ssl.sh"
    mode:       0755
    contents:
      inline: |
        #!/bin/bash  
        set -e 

        cd /etc/kubernetes/ssl    
        
        if [[ -e /etc/kubernetes/ssl/apiserver.key ]]; then
          echo 'apiserver.key is ready!'
        else
          openssl genrsa -out apiserver.key 2048
          echo 'apiserver.key is ready!'
        fi

        if [[ -e /etc/kubernetes/ssl/apiserver.pem ]]; then
          echo 'apiserver.pem is ready!'
        else
          openssl req -new -key apiserver.key -out apiserver.csr -subj "/CN=admin/C=CN/ST=BeiJing/L=Beijing/O=system:masters/OU=System" -config openssl-apiserver.cnf
          openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out apiserver.pem -days 365 -extensions v3_req -extfile openssl-apiserver.cnf
          echo 'apiserver.pem is ready!'
        fi

        if [[ -e /etc/kubernetes/ssl/admin.key ]]; then
          echo 'admin.key is ready!'
        else
          openssl genrsa -out admin.key 2048
          echo 'admin.key is ready!'
        fi

        if [[ -e /etc/kubernetes/ssl/admin.pem ]]; then
          echo 'admin.pem is ready!'
        else
          openssl req -new -key admin.key -out admin.csr -subj "/CN=admin/C=CN/ST=BeiJing/L=Beijing/O=system:masters/OU=System" 
          openssl x509 -req -in admin.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out admin.pem -days 365 -extensions v3_req  
          echo 'admin.pem is ready!'
        fi
  - filesystem: "root"
    path:       "/etc/kubernetes/scripts/kubelet-kubectl.sh"
    mode:       0755
    contents:
      inline: |
        #!/bin/bash 
        set -e 

        MASTER_HOST={{ MASTER_HOST }}
        CA_CERT=/etc/kubernetes/ssl/ca.pem
        ADMIN_KEY=/etc/kubernetes/ssl/admin.key
        ADMIN_CERT=/etc/kubernetes/ssl/admin.pem

        /opt/bin/kubectl config set-cluster kubernetes --server=https://$MASTER_HOST:{{ K8S_PORT }} --certificate-authority=$CA_CERT --embed-certs=true
        /opt/bin/kubectl config set-credentials admin --certificate-authority=$CA_CERT --client-key=$ADMIN_KEY --client-certificate=$ADMIN_CERT --embed-certs=true
        /opt/bin/kubectl config set-context kubernetes --cluster=kubernetes --user=admin
        /opt/bin/kubectl config use-context kubernetes
networkd:
  units:
  - name: 00-static.network
    contents: |
      [Match]
      Name={{ NETWORK }}

      [Network]
      DNS={{ DNS }}
      Address={{ HOST_IP }}/24
      Gateway={{ GATEWAY }}
      DHCP=no      
systemd:
  units:
  - name: "settimezone.service"
    enable: true
    contents: |
      [Unit]
      Description=time zone Asia/Shanghai
      [Service]
      ExecStart=/usr/bin/timedatectl set-timezone Asia/Shanghai
      RemainAfterExit=yes
      Type=oneshot  
      [Install]
      WantedBy=multi-user.target   
  - name: "rkt-prepare.service"
    enable: true    
    contents: |
      [Unit]
      Description=download etcd flannel kubelet aci (HTTP)

      [Service]
      Restart=on-failure
      RestartSec=10
      TimeoutStartSec=0

      Environment=PATH=/bin:/opt/bin:/usr/bin:/usr/sbin:/sbin:$PATH
      Environment=HTTP_SERVER={{ HTTP_SERVER }}
      Environment=ACI_REGISTRY={{ RKT_ACI_REGISTRY }}
      Environment=REGISTRY_DATA={{ REGISTRY_DATA }}
      Environment=ACI_ETCD={{ RKT_ACI_ETCD }}
      Environment=ACI_FLANNEL={{ RKT_ACI_FLANNEL }}
      Environment=ACI_KUBELET={{ RKT_ACI_KUBELET }}
      Environment=DEP_KUBECTL={{ DEP_KUBECTL }}

      ExecStart=/etc/kubernetes/scripts/rkt-prepare.sh
      [Install]
      WantedBy=multi-user.target
  - name: "registry.service"
    enable: true    
    contents: |
      [Unit]
      Description=registry (Docker Hub)
      Documentation=https://github.com/coreos/registry
      After=rkt-prepare.service

      [Service]
      Environment=PATH=/opt/bin/:/usr/bin/:/usr/sbin:$PATH

      ExecStartPre=/usr/bin/mkdir -p /data/registry
      ExecStartPre=/usr/bin/mkdir --parents /var/lib/coreos
      ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/lib/coreos/registry-pod.uuid       

      ExecStart=/usr/bin/rkt run \
        --insecure-options=image \
        --uuid-file-save=/var/lib/coreos/registry-pod.uuid \
        --port=5000-tcp:5000 \
        --volume data,kind=host,source=/data/registry \
        --mount volume=data,target=/var/lib/registry \
        /etc/kubernetes/downloads/{{ RKT_ACI_REGISTRY }}.aci \
        --name=registry 

      ExecStop=-/usr/bin/rkt stop --uuid-file=/var/lib/coreos/registry-pod.uuid

      Restart=always
      RestartSec=10
      TimeoutSec=infinity
      [Install]
      WantedBy=multi-user.target        
  - name: "etcd2.service"
    enable: false    
  - name: "etcd-member.service"
    enable: false                 
  - name: "etcd3.service"
    enable: true    
    contents: |
      [Unit]
      Description=etcd (System Application Container)
      Documentation=https://github.com/coreos/etcd
      Wants=network.target
      Conflicts=etcd.service
      Conflicts=etcd2.service
      Conflicts=etcd-member.service

      [Service]
      Type=notify
      Restart=on-failure
      RestartSec=10s
      TimeoutStartSec=0
      LimitNOFILE=40000

      ExecStartPre=/usr/bin/mkdir --parents /var/lib/coreos
      ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/lib/coreos/etcd3-pod.uuid
      
      Environment="ETCD_IMAGE=/etc/kubernetes/downloads/{{ RKT_ACI_ETCD }}.aci"
      Environment="ETCD_USER=etcd"        
      Environment="ETCD_DATA_DIR=/var/lib/etcd"
      Environment="RKT_GLOBAL_ARGS=--insecure-options=image"        
      Environment="RKT_RUN_ARGS=--uuid-file-save=/var/lib/coreos/etcd3-pod.uuid --volume data-dir,kind=host,source=/var/lib/etcd,readOnly=false"
      Environment="ETCD_IMAGE_ARGS=--name=etcd"

      ExecStart=/usr/lib/coreos/etcd-wrapper \
        --name={{ inventory_hostname }} \
        --initial-cluster-token=spacesystech.com \
        --initial-cluster={% for host in play_hosts %}{{ host }}=http://{{ hostvars[host]['ansible_default_ipv4']['address'] }}:2380{% if loop.last %}{% else %},{% endif %}{% endfor %} \
        --initial-cluster-state=new \
        --advertise-client-urls=http://{{ HOST_IP }}:2379 \
        --initial-advertise-peer-urls=http://{{ HOST_IP }}:2380 \
        --listen-client-urls=http://{{ HOST_IP }}:2379,http://127.0.0.1:2379 \
        --listen-peer-urls=http://{{ HOST_IP }}:2380

      ExecStop=-/usr/bin/rkt stop --uuid-file=/var/lib/coreos/etcd3-pod.uuid    

      [Install]
      WantedBy=multi-user.target          
  - name: "flannel-docker-opts.service"
    enable: true    
    dropins:
      - name: 10-image.conf
        contents: |
          [Unit]
          After=etcd3.service
          [Service]                                     
          Environment="FLANNEL_IMAGE=/etc/kubernetes/downloads/{{ RKT_ACI_FLANNEL }}.aci"    
          Environment="RKT_GLOBAL_ARGS=--insecure-options=image"
          Environment="FLANNEL_IMAGE_ARGS=--name=flannelopts --exec=/opt/bin/mk-docker-opts.sh"
  - name: "flanneld.service"
    enable: true    
    dropins:
      - name: 10-image.conf
        contents: |
          [Unit]
          After=etcd3.service
          [Service]      
          ExecStartPre=/usr/bin/etcdctl set {{ flannel_etcd_prefix }}/config '{ "Network": "10.2.0.0/16","Backend": {"Type":"vxlan"} }' 

          Environment="FLANNELD_IFACE={{ HOST_IP }}"
          Environment="FLANNELD_ETCD_ENDPOINTS=http://{{ HOST_IP }}:2379"
          Environment="FLANNELD_ETCD_PREFIX={{ flannel_etcd_prefix }}"
          Environment="FLANNEL_IMAGE=/etc/kubernetes/downloads/{{ RKT_ACI_FLANNEL }}.aci"
          Environment="RKT_GLOBAL_ARGS=--insecure-options=image"
          Environment="FLANNEL_IMAGE_ARGS=--name=flannel"
  - name: "docker.service"
    enable: true    
    dropins:
      - name: 40-flannel.conf
        contents: |
          [Unit]
          Requires=flanneld.service
          After=flanneld.service
          [Service]
          Environment=DOCKER_OPT_BIP=""
          Environment=DOCKER_OPT_IPMASQ=""
      - name: 50-insecure-registry.conf
        contents: |
          [Service]
          Environment=DOCKER_OPTS='--insecure-registry="{{ insecure_registries|join('" --insecure-registry="') }}"'      
  - name: "kubelet.service"
    enable: true    
    contents: |
      [Unit]
      Description=kubelet
      Documentation=https://kubernetes.io
      After=docker.service
      [Service]
      Environment=PATH=/opt/bin/:/usr/bin/:/usr/sbin:$PATH
      Environment=KUBELET_IMAGE=/etc/kubernetes/downloads/{{ RKT_ACI_KUBELET }}.aci
      Environment="RKT_GLOBAL_ARGS=--insecure-options=image" 
      Environment="RKT_OPTS=--volume modprobe,kind=host,source=/usr/sbin/modprobe \
        --mount volume=modprobe,target=/usr/sbin/modprobe \
        --volume lib-modules,kind=host,source=/lib/modules \
        --mount volume=lib-modules,target=/lib/modules \
        --uuid-file-save=/var/run/kubelet-pod.uuid \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        --volume dns,kind=host,source=/etc/resolv.conf \
        --mount volume=dns,target=/etc/resolv.conf"

      ExecStartPre=/etc/kubernetes/scripts/kubelet-ssl.sh

      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
      ExecStartPre=/usr/bin/mkdir -p /var/log/containers
      ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid

      ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --kubeconfig=/etc/kubernetes/config/kubelet.yaml \
        --register-node=true \
        --allow-privileged=true \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --hostname-override={{ ADVERTISE_IP }} \
        --cluster-dns={{ DNS_SERVICE_IP }} \
        --cluster-domain=cluster.local \
        --pod-infra-container-image={{ REGISTRY_SOURCE_LOCAL }}{{ K8S_IMAGES['PAUSE']['NAME'] }}:{{ K8S_IMAGES['PAUSE']['VERSION'] }}

      ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid

      Restart=always
      RestartSec=10
      [Install]
      WantedBy=multi-user.target